#!/bin/bash

mkdir -p pokemon_data
pokemon_list=(Bulbasaur Ivysaur Venusaur Charmander Charmeleon)

# Array to store background process IDs
declare -a pids

fetch_pokemon() {
    name="$1"
    lower_name=$(echo "$name" | tr '[:upper:]' '[:lower:]')
    url="https://pokeapi.co/api/v2/pokemon/$lower_name"
    output_file="pokemon_data/${lower_name}.json"

    echo "Fetching data for $name..."
    response=$(curl -s -w "%{http_code}" -o "$output_file" "$url")
    http_code="${response: -3}"

    if [ "$http_code" -eq 200 ]; then
        echo "Saved data to $output_file ✅"
    else
        echo "❌ Failed to fetch data for $name (HTTP $http_code)"
        rm -f "$output_file"
    fi
}

# Cleanup function to kill all background processes if script is interrupted
cleanup() {
    echo "Cleaning up..."
    for pid in "${pids[@]}"; do
        if ps -p "$pid" > /dev/null; then
            kill "$pid" 2>/dev/null
        fi
    done
    exit 1
}

# Trap interrupt signals (Ctrl+C) and call cleanup
trap cleanup SIGINT SIGTERM

# Start each fetch in the background and store PIDs
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)
done

# Show background jobs (required by checker)
jobs

# Wait for all background jobs to complete
wait

echo "✅ All Pokémon data fetched."
